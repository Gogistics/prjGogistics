<!-- wine query(index page) template -->
<style>
@media all and (min-device-width: 768px) {
	.index_page_block {
		height: 100%
	}
	.index_page_block.ng-enter{
		-webkit-animation: fadeInUp 5s;
	    -moz-animation: fadeInUp 5s;
	    -ms-animation: fadeInUp 5s;
	    animation: fadeInUp 5s;
	}
	
	.vertical-center {
		min-height: 100% !important;
		min-height: 100vh !important;
		display: flex !important;
		display: -webkit-flex !important;
		align-items: center !important;
		-webkit-align-items: center !important;
		justify-content: center;
	}
	.jumbotron {
		margin-bottom: 0px !important;
		background-color: transparent !important;
	}
	.flexcontainer {
		height:200px;
		display: -webkit-flex;
		display: flex;
		-webkit-flex-direction: row;
		flex-direction: row;
		-webkit-align-items: center;
		align-items: center;
		-webkit-justify-content: center;
		justify-content: center;
	}
	
	::-webkit-input-placeholder {
	   text-align: center;
	}
	
	:-moz-placeholder { /* Firefox 18- */
	   text-align: center;  
	}
	
	::-moz-placeholder {  /* Firefox 19+ */
	   text-align: center;  
	}
	
	:-ms-input-placeholder {  
	   text-align: center; 
	}
	
	
	/* vintage selector*/
	.vintage_field{
		width: 150px !important;
		margin-right: 3px !important;
		text-align: center !important;
		border-top-left-radius: 3px !important;
		border-bottom-left-radius: 3px !important;
	}
	
	.wine_info_query_field{
		text-align: center;
	}
	
	
	/* filter animation*/
	.vintage_list{
		max-height: 100px;
		overflow: auto;
	}
	.animate-repeat {
	  line-height:40px;
	  list-style:none;
	  box-sizing:border-box;
	}
	
	.animate-repeat.ng-move,
	.animate-repeat.ng-enter,
	.animate-repeat.ng-leave {
	  -webkit-transition:all linear 0.5s;
	  transition:all linear 0.5s;
	}
	
	.animate-repeat.ng-leave.ng-leave-active,
	.animate-repeat.ng-move,
	.animate-repeat.ng-enter {
	  opacity:0;
	  max-height:0;
	}
	
	.animate-repeat.ng-leave,
	.animate-repeat.ng-move.ng-move-active,
	.animate-repeat.ng-enter.ng-enter-active {
	  opacity:1;
	  max-height:40px;
	}
	
	
	.search_block{
		margin: 20px auto;
	}
	
	.query_filter_filed{
		text-align: center;
	}
	
	.map_nearest_store{
		max-width: 650px; height: 500px; border: 1px solid #eee; margin: 5px auto; border-radius: 3px;
	}
	
	
	/* d3 box */
	
	#d3_box{
		max-width: 600px;
		margin: 10px auto;
		overflow: auto;
	}
	
	.box {
	  font: 10px sans-serif;
	}
	
	.box line,
	.box rect,
	.box circle {
	  fill: #eee;
	  stroke: #333;
	  stroke-width: 1px;
	}
	
	.box .center {
	  stroke-dasharray: 3,3;
	}
	
	.box .outlier {
		display: none;
	    fill: none;
	  	stroke: #000;
	}
	
	.axis {
	  font: 12px sans-serif;
	}
	 
	.axis path,
	.axis line {
	  fill: none;
	  stroke: #000;
	  shape-rendering: crispEdges;
	}
	 
	.x.axis path { 
	  fill: none;
	  stroke: #000;
	  shape-rendering: crispEdges;
	}
}

@media all and (max-device-width: 767px) {

}
</style>

<!-- wine info query controller -->
<div ng-controller="wineInfoQueryCtrl as ctrl" class="index_page_block">
	<div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 jumbotron vertical-center text-center">
		<div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
			<div class="container">
			      <div class="row search_block">
			         <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
			         	<!-- search input group -->
			            <div class="input-group">
				             <div class="input-group-btn" >
					            <div class="btn-group">
					            	<!-- vintage field with query event while clicking Enter -->
					                <input type="number" min="0" class="form-control dropdown-toggle vintage_field" data-toggle="dropdown" placeholder="Vintage" ng-model="wine.vintage" ng-keyup="ctrl.search_wine_info_of_keyup($event)">
					                <!-- temp. block vintage selector for better UX -->
					                <!-- ul class="dropdown-menu vintage_list" role="menu">
					                    <li class="animate-repeat" ng-repeat = " ith in ctrl.vintage | filter:wine.vintage "><a ng-click = "ctrl.get_query_vintage(ith)">[[ith]]</a></li>
					                </ul -->
					            </div>
					        </div>
					        
					        <!-- info field with query event while clicking Enter -->
			                <input type="text" class="form-control wine_info_query_field" ng-model = "wine.info" placeholder="Type the wine information for query" ng-keyup = "ctrl.search_wine_info_of_keyup($event)">
			               
			               <!-- query button -->
			                <span class="input-group-btn">
			                   <input class="btn btn-default" type="button" value="Search" ng-click = "ctrl.search_wine_info()">
			                </span>
			            </div>
			            <!-- /search input group -->
			            
			         </div>
			      </div>
			      
			      <!-- query result -->
			      <div ng-if="ctrl.has_result" class="animate-if">
				      <!-- query result (text) -->
				      <div class="row search_block">
				      	<div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
				      		<ul class="list-group">
				      			<li class="list-group-item"><input class="form-control query_filter_filed" type="text" placeholder="Filter Query Information" ng-model="ctrl.query_keyword" ng-keyup = "ctrl.search_wine_info_of_keyup_by_qery_keyword($event)"></li>
				      			<li class="list-group-item animate-repeat" ng-repeat = "info in ctrl.info_list | filter:ctrl.query_keyword">[[info]]</li>
				      		</ul>
				      	</div>
				      </div>
				      
				      <!-- store info -->
				      <div class="row search_block">
				      	<div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
				      		<ul class="list-group">
					      		<li class="list-group-item">
					      			<h4>Stores Information (Selling Stores and Nearest Store)</h4>
					      		</li>
					      		
					      		<!-- query result including text and map -->
					      		<li class="list-group-item col-xs-12 col-sm-12 col-md-12 col-lg-12 text-center">
					      			<div class="col-xs-12 col-sm-12 col-md-4 col-lg-4">
						      			<ul class="list-group">
						      				<li class="list-group-item"><input class="form-control query_filter_filed" type="text" placeholder="Filter Stores Information" ng-model="query_store_keyword"></li>
						      				<li class="list-group-item text-left"  style="max-height: 450px; overflow: auto;">
							      				<div class="animate-repeat" ng-repeat = "store in ctrl.selling_stores | filter:query_store_keyword">
							      				[[store.merchant]]
							      				<br>
							      				[[store.merchant_description]]
							      				<br>
							      				<br>
							      				[[store.address]]
							      				<br>
							      				[[store.state]]
							      				<br>
							      				[[store.country]]
							      				<br>
							      				Phone Number:<a href="tel:[[store.phone_number]]">&nbsp;[[store.phone_number]]</a>
							      				<br>
							      				<br>
							      				[[store.wine]]
							      				<br>
							      				[[store.vintage]]
							      				<br>
							      				[[store.bottle_size]]
							      				<hr>
							      				</div>
						      				</li>
						      			</ul>
					      			</div>
					      			<div class="col-xs-12 col-sm-12 col-md-8 col-lg-8" id="map_nearest_store" ng-class="ctrl.is_map_shown() ? 'map_nearest_store' : '' "></div>
					      		</li>
				      		</ul>
				      	</div>
				      </div>
			      </div>
			</div>
		</div>
	</div>
</div>

<!-- d3 box testing -->
<div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 text-center">
<div id="d3_box"></div>
</div>
<script type="text/javascript">
var labels = true; // show the text labels beside individual boxplots?

var margin = {top: 50, right: 100, bottom: 120, left: 100};
var  width = 800 - margin.left - margin.right; // dynamically change the width
var height = 400 - margin.top - margin.bottom;
	
var min = Infinity,
    max = -Infinity;
	
// parse in the data	
d3.csv("/mis/data.csv", function(error, csv) {
	// using an array of arrays with
	// data[n][2] 
	// where n = number of columns in the csv file 
	// data[i][0] = name of the ith column
	// data[i][1] = array of values of ith column

	var data = [];
	data[0] = [];
	data[1] = [];
	data[2] = [];
	data[3] = [];
	data[4] = [];
	// add more rows if your csv file has more columns

	// add here the header of the csv file
	data[0][0] = "Q1";
	data[1][0] = "Q2";
	data[2][0] = "Q3";
	data[3][0] = "Q4";
	data[4][0] = "Q5";
	// add more rows if your csv file has more columns

	data[0][1] = [];
	data[1][1] = [];
	data[2][1] = [];
	data[3][1] = [];
	data[4][1] = [];
  
	csv.forEach(function(x) {
		var v1 = Math.floor(x.Q1),
			v2 = Math.floor(x.Q2),
			v3 = Math.floor(x.Q3),
			v4 = Math.floor(x.Q4);
			v5 = Math.floor(x.Q5);
			// add more variables if your csv file has more columns
			
		var rowMax = Math.max(v1, Math.max(v2, Math.max(v3, Math.max(v4,v5))));
		var rowMin = Math.min(v1, Math.min(v2, Math.min(v3, Math.min(v4,v5))));

		data[0][1].push(v1);
		data[1][1].push(v2);
		data[2][1].push(v3);
		data[3][1].push(v4);
		data[4][1].push(v5);
		 // add more rows if your csv file has more columns
		 
		if (rowMax > max) max = rowMax;
		if (rowMin < min) min = rowMin;	
	});
  
	var chart = d3.box()
		.whiskers(iqr(1.5))
		.height(height)	
		.domain([min, max])
		.showLabels(labels);

	var svg = d3.select("#d3_box").append("svg")
		.attr("width", width + margin.left + margin.right)
		.attr("height", height + margin.top + margin.bottom)
		.attr("class", "box")    
		.append("g")
		.attr("transform", "translate(" + margin.left + "," + margin.top + ")");
	
	// the x-axis
	var x = d3.scale.ordinal()	   
		.domain( data.map(function(d) { console.log(d); return d[0] } ) )	    
		.rangeRoundBands([0 , width], 0.7, 0.3); 		

	var xAxis = d3.svg.axis()
		.scale(x)
		.orient("bottom");

	// the y-axis
	var y = d3.scale.linear()
		.domain([min, max])
		.range([height + margin.top, 0 + margin.top]);
	
	var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");

	// draw the boxplots	
	svg.selectAll(".box")	   
      .data(data)
	  .enter().append("g")
	  .attr("transform", function(d) { return "translate(" +  x(d[0])  + "," + margin.top + ")"; } )
      .call(chart.width(x.rangeBand())); 
	
	      
	// add a plot title
	svg.append("text")
        .attr("x", (width / 2))             
        .attr("y", -30 + (margin.top / 2))
        .attr("text-anchor", "middle")  
        .style("font-size", "18px") 
        .style("text-decoration", "underline")  
        .text("Wine Price Analysis");
 
	 // draw y axis title
	svg.append("g")
        .attr("class", "y axis")
        .call(yAxis)
		.append("text") // and text1
		.attr("transform", "rotate(-90)")
		.attr("x", -50)
		.attr("y", -80)
		.attr("dy", ".71em")
		.style("text-anchor", "end")
		.style("font-size", "16px")
		.style("font-weight", "bold")
		.text("Price in $(US dollar)");		
	
	// draw x axis title
	svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + (height  + margin.top + 10) + ")")
      .call(xAxis)
	  .append("text")             // text label for the x axis
        .attr("x", (width / 2) )
        .attr("y",  30 )
		.attr("dy", ".71em")
        .style("text-anchor", "middle")
		.style("font-size", "16px")
		.style("font-weight", "bold")
        .text("Vintage"); 
});

// Returns a function to compute the interquartile range.
function iqr(k) {
  return function(d, i) {
    var q1 = d.quartiles[0],
        q3 = d.quartiles[2],
        iqr = (q3 - q1) * k,
        i = -1,
        j = d.length;
    while (d[++i] < q1 - iqr);
    while (d[--j] > q3 + iqr);
    return [i, j];
  };
}
</script>
